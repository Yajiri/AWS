Transform: AWS::Serverless-2016-10-31

Resources:

  dentistimoEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: dentistimoEventBus
    DeletionPolicy: Delete
  EventBusPolicy0:
    Type: AWS::Events::EventBusPolicy
    Properties:
      StatementId: allow_all_accounts_from_organization_to_put_events
      EventBusName: dentistimoEventBus
      Statement:
        Sid: allow_all_accounts_from_organization_to_put_events
        Effect: Allow
        Principal: '*'
        Action: events:PutEvents
        Condition:
          StringEquals:
            aws:PrincipalOrgID: o-nc9mlzundg
        Resource:
          Fn::GetAtt:
            - dentistimoEventBus
            - Arn
    DependsOn:
      - dentistimoEventBus
  EventBusPolicy1:
    Type: AWS::Events::EventBusPolicy
    Properties:
      StatementId: allow_account_to_manage_rules_they_created
      EventBusName: dentistimoEventBus
      Statement:
        Sid: allow_account_to_manage_rules_they_created
        Effect: Allow
        Principal: '*'
        Action:
          - events:PutRule
          - events:PutTargets
          - events:DeleteRule
          - events:RemoveTargets
          - events:DisableRule
          - events:EnableRule
          - events:TagResource
          - events:UntagResource
          - events:DescribeRule
          - events:ListTargetsByRule
          - events:ListTagsForResource
        Condition:
          StringEquals:
            aws:PrincipalOrgID: o-nc9mlzundg
        Resource:
          Fn::GetAtt:
            - dentistimoEventBus
            - Arn
    DependsOn:
      - dentistimoEventBus
  bookAppointmentDDBRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: dentistimoEventBus
      EventPattern:
        detail-type:
          - equals-ignore-case: CreateAppointment
      Name: bookAppointmentDDBRule
      State: ENABLED
      Targets:
        - Id: !Ref bookAppointmentDDB
          Arn: !GetAtt bookAppointmentDDB.Arn
  bookAppointmentDDBPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt bookAppointmentDDB.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt bookAppointmentDDBRule.Arn     

  dentistimo:
    Type: AWS::Serverless::Api
    Name: dentistimo
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: dentistimo
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /clinics/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getClinics.Arn}/invocations
              responses: {}
          /clinics/{clinicId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getClinic.Arn}/invocations
              responses: {}
          /schedule/{clinicId}/{date}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getSchedule.Arn}/invocations
              responses: {}
          /schedule/:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${bookAppointmentEB.Arn}/invocations
              responses: {}

      EndpointConfiguration: EDGE
      TracingEnabled: true
      Cors:
        AllowMethods: '''POST, GET, DELETE'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
        MaxAge: '''600'''

  getClinic:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getClinic
      CodeUri: s3://dentistimogbg/GetClinic.zip
      FunctionName: getClinic
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoGETclinicsid:
          Type: Api
          Properties:
            Path: /clinics/{clinicId}
            Method: GET
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          TABLE_NAME: !Ref DentistimoClinicsTable
          TABLE_ARN: !GetAtt DentistimoClinicsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DentistimoClinicsTable
  getClinicLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${getClinic}
  getClinics:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getClinics
      CodeUri: s3://dentistimogbg/GetClinics.zip
      FunctionName: getClinics
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoGETclinics:
          Type: Api
          Properties:
            Path: /clinics/
            Method: GET
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          TABLE_NAME: !Ref DentistimoClinicsTable
          TABLE_ARN: !GetAtt DentistimoClinicsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DentistimoClinicsTable
  getClinicsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${getClinics}
  getSchedule:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getSchedule
      CodeUri: s3://dentistimogbg/GetSchedule.zip
      FunctionName: getSchedule
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoGETclinicsidappointments:
          Type: Api
          Properties:
            Path: /schedule/{clinicId}/{date}
            Method: GET
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          TABLE_NAME: !Ref DentistimoAppointmentsTable
          TABLE_ARN: !GetAtt DentistimoAppointmentsTable.Arn
          TABLE_NAME: !Ref DentistimoClinicsTable
          TABLE_ARN: !GetAtt DentistimoClinicsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DentistimoAppointmentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DentistimoClinicsTable

  getScheduleLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${getSchedule}

  bookAppointmentEB:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: bookAppointment
      CodeUri: s3://dentistimogbg/BookAppointmentEB.zip
      FunctionName: bookAppointmentEB
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        dentistimoPOSTclinicsidappointments:
          Type: Api
          Properties:
            Path: /schedule/
            Method: POST
            RestApiId: !Ref dentistimo
      Environment:
        Variables:
          EVENTBUS: !Ref dentistimoEventBus
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: dentistimoEventBus
  bookAppointmentEBLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${bookAppointmentEB}

  bookAppointmentDDB:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: bookAppointmentDDB
      CodeUri: s3://dentistimogbg/BookAppointmentDDB.zip
      FunctionName: bookAppointmentDDB
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref DentistimoAppointmentsTable
          TABLE_ARN: !GetAtt DentistimoAppointmentsTable.Arn
          TABLE_NAME: !Ref DentistimoClinicsTable
          TABLE_ARN: !GetAtt DentistimoClinicsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DentistimoAppointmentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DentistimoClinicsTable
        - SESCrudPolicy:
            IdentityName: '*'
            # Resource: '*'


  bookAppointmentDDBLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${bookAppointmentDDB}

  DentistimoClinicsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: clinicId
          AttributeType: N

      KeySchema:
        -
          AttributeName: clinicId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: DentistimoClinicsTable
  DentistimoAppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: clinicId
          AttributeType: N
        -
          AttributeName: date
          AttributeType: S

      KeySchema:
        -
          AttributeName: clinicId
          KeyType: HASH
        -
          AttributeName: date
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES  
      TableName: DentistimoAppointmentsTable
Outputs:
  ProdDataEndpoint:
    Description: "Dentistimo API Prod stage endpoint"
    Value: !Sub "https://${dentistimo}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Group
      Members:
        - getSchedule
        - getClinics
        - getClinic
    Group2:
      Label: Group2
      Members:
        - Group4
        - Group3
        - Group5
    Group3:
      Label: Group3
      Members:
        - bookAppointmentDDB
    Group4:
      Label: Group4
      Members:
        - dentistimoEventBus
    Group5:
      Label: Group5
      Members:
        - bookAppointment